1.5에 도입된 지네릭스를 완전히 이해하긴 힘들다. 이 장에서는 기본 정도를 익히고, 다른 장에서 어떻게 활용되는지 알아보자.

## 1. 1 지네릭스란?

- 타입 체크를 **컴파일 시**에 하는 기능.
- 객체의 타입 안정성을 높이고, 형변환의 번거로움을 줄여준다.
  (하나의 컬렉션에는 대부분 한 종류의 객체만 저장한다)

장점

- 타입 안정성
- 코드 간결(타입체크와 형변환을 생략하므로)

## 1. 2 지네릭 클래스의 선언

```java
// before
class Box {
  Object item;

  void setItem(Object item) {
    this.item = item;
  }

  Object getItem() {
    return item;
  }
}

// after
class Box<T> {    // 지네릭 T 선언
  T item;

  void setItem(T item) {
    this.item = item;
  }

  T getItem() {
    return item;
  }
}
```

참조변수, 생성자에 T 대신 실제 타입을 지정하면 형변환 생략 가능

```java
Box<String> b=new Box<String>();     // 실제 타입 지정
    b.setItem(new Object());               // 에러. String만 가능
    b.setItem("ABC");                      // ok
    String item=(String)b.getItem();    // 형변환 필요 없음
```

### 1. 2.2 용어

- Box<T> : 지네릭 클래스. T의 Box 혹은 T Box라고 읽는다.
- T : 타입 변수 혹은 타입 매개변수. (T는 타입 문자)
- Box : 원시 타입(raw type)

### 1. 2.2 제약사항

- static 멤버에는 타입 변수 T를 사용할 수 없다.

    ```java
    class Box<T> {
      static T item;     // 에러
      static int compare(T t1, T t2){...}   // 에러
    }
    ```

- T[] 배열을 **생성**할 수는 없다.

    ```java
    class Box<T> {
      T[] itemArr;
      T[] toArray(){
        T[] arr = new T[itemArr.length];       // 에러
      }
    }
    ```

## 1. 3 객체 생성과 사용

- 지네릭 클래스 Box<T>의 선언

  ```java
  class Box<T> {
    ArrayList<T> list = new ArrayList<T>();
  
    void add(T item) {
      list.add(item);
    }
  
    T get(int i) {
      return list.get(i);
    }
  
    ArrayList<T> getList() {
      return list;
    }
  
    int size() {
      return list.size();
    }
  
    public String toString() {
      return list.toString();
    }
  }
  ```
- Box<T>의 객체 생성. 참조 현수와 생성자에 대입된 타입이 일치해야한다.
  ```java
  Box<Apple> appleBox = new Box<Apple>();
  Box<Apple> appleBox1 = new Box<Grape>();  // 에러
  Box<Fruit> appleBox2 = new Box<Apple>();  // 에러
  Box<Apple> appleBox3 = new Box<Fruit>();  // 에러
  ```
- 두 지네릭 클래스가 상속관계이고, 대입된 타입이 일치하는 것은 가능
  ```java
  Box<Apple> appleBox = new FruitBox<Apple>();  // 다형성
  Box<Apple> appleBox = new Box<>();  // JDK 1.7부터 생략 가능    
  ```
- 대입된 타입과 다른 타입의 객체는 추가할 수 없다.
  ```java
  Box<Apple> appleBox = new Box<Apple>();
  appleBox.add(new Apple());
  appleBox.add(new Grape());    // 에러   
  ```
## 1. 4 제한된 지네릭 클래스
- 지네릭 타입에 extends를 사용하여 타입을 특정한다.
```java
class FruitBox<T extends Fruit> {
  ArrayList<T> list = new ArrayList<>();
  void add(T item){list.add(item);}
}
// add()의 매개변수 타입도 Fruit과 그 자손 타입이다.
FruitBox<Fruit> fruitBox = new FruitBox<Fruit>();
fruitBox.add(new Apple());
fruitBox.add(new Grape());
// 인터페이스도 extends를 사용
interface Eatable(){}
class FruitBox<T extends Eatable>{}
class FruitBox<T extends Eatable & Fruit>{}
```
## 1. 5 와일드 카드 '?'
- 지네릭 타입에 와일드 카드를 쓰면, 여러 타입을 대입할 수 있다. 
단, 와일드 카드에는 extends 시에 &를 쓸 수 없다.
  - <? extends T> : 와일드 카드의 상한 제한. T와 그 자손만 가능
  - <? super T> : 와일드 카드의 하한 제한. T와 그 조상들만 가능
  - <?> : 제한 없음. <? extends Object>와 동일.
  ```java
  static Juice makeJuice(FruitBox<? extends Fruit> box){
    String temp = "";
    for(Fruit f: box.getList()) temp += f + " ";
    return new Juice(temp);
  }
  
  FruitBox<Fruit> fruitBox = new FruitBox<Fruit>();
  FruitBox<Apple> appleBox = new FruitBox<Apple>();
      ...
  System.out.println(Juicer.makeJuice(fruitBox));
  System.out.println(Juicer.makeJuice(appleBox));
  ```
## 1. 6 지네릭 메서드
- 반환타입 앞에 지네릭 타입이 선언된 메서드
  ```java
  static <T> void sort(List<T> list, Comparator<? super T> c){}
  ```
- 클래스의 타입 매개변수 T와 메서드의 타입 매개변수 T는 별개
  ```java
  class FruitBox<T>{
    static <T> void sort(List<T> list, Comparator<? super T> c){}
  }
  ```
- 지네릭 메서드를 호출할 때, 타입 변수에 타입을 대입해야 한다.
 (대부분의 경우 추정이 가능해서 생략 가능)
  ```java
  FruitBox<Fruit> fruitBox = new FruitBox<Fruit>();
  FruitBox<Apple> appleBox = new FruitBox<Apple>();
      ...
  System.out.println(Juicer.<Fruit>makeJuice(fruitBox));
  System.out.println(Juicer.makeJuice(appleBox));
  ```
## 1. 7 지네릭의 형변환
1. 지네릭과 원시 타입간의 형변환은 불가능
2. 와일드 카드가 사용된 지네릭 타입으로는 형변환 가능
3. <? extends Object> == <?>
```java
// 1
Box box = null;
Box<Object> objBox = null;
Box<String> strBox = null;

box = (Box)objBox;          // 가능. 경고는 발생
objBox = (Box<Object>)box;  // 가능. 경고는 발생
objBox = (Box<String>)box;  // 불가능. 
strBox = (Box<Object>)box;  // 불가능.
// Box<Object> objBox = new Box<String>(); 이 안되는 것과 동일
    
Box<? extends Object> wBox = new Box<String>(); // 가능

static Juice makeJuice(FruitBox<? extends Fruit> box){...}
// 하단은 모두 가능. 반대도 되지만, 확인되지 않은 형변환이라는 경고 발생
FruitBox<? extends Fruit> box = new FruitBox<Fruit>();
FruitBox<? extends Fruit> box = new FruitBox<Apple>();
FruitBox<? extends Fruit> box = new FruitBox<Grape>();

FruitBox<? extends Fruit> box = null;
FruitBox<Apple> appleBox = (Fruit<Apple>)box;   // Ok. 미확인 타입으로 형변환 경고
```
###예제
```java
public final class Optional<T> {
  private static final Optional<?> EMPTY = new Optional<>();
  private final T value;

  // ...
  public static <T> Optional<T> empty() {
    Optional<T> t = (Optional<T>) EMPTY;
    return t;
  }
//   Optional<?> EMPTY = new Optional<>(); 
//-> Optional<? extends Object> EMPTY = new Optional<>();
//-> Optional<? extends Object> EMPTY = new Optional<Object>();
}
```
``Optional<?> EMPTY = new Optional<?>();``
는 에러

``class Box<T extends Fruit>``의 경우,``Box<?> b = new Box<>();``는 ``Box<?> b = new Box<Fruit>();``이다

위의 문장에서 ``Optional<Object>``가 아닌 ``Optional<?>``로 한 이유는 ``Optional<T>``로 형변환이 가능하기 때문.
```java
Optional<?> wopt = new Optional<Object>();
Optional<Object> oopt = new Optional<Object>();

Optional<String> sopt = (Optional<String>)wopt; // OK
Optional<String> sopt = (Optional<String>)oopt; // error
```
다음과 같이 와일드 카드가 사용된 지네릭 타입끼리도 다음과 같은 경우에는 형변환이 가능하다.
```java
FruitBox<? extends Object> objBox = null;
FruitBox<? extends String> strBox = null;

strBox = (FruitBox<? extends Object>)objBox; // OK. 미확정 타입으로 형변환 경고
objBox = (FruitBox<? extends String>)strBox; // OK. 미확정 타입으로 형변환 경고
```
와일드 카드는 타입이 확정된 것이 아니기 때문에 컴파일러는 경고를 출력한다.
## 1. 8 지네릭 타입의 제거
컴파일된 파일(*.class)은 지네릭 타입에 대한 정보가 없다. 이유는 지네릭 도입 전의 소스코드와 호환성을 유지하기 위해서이다. 앞으로는 하위 호환성을 포기하게 될 때를 위해서 원시 타입을 사용하지 않도록 하자.
###1. 지네릭 타입의 경계(bound) 제거
```java
// before
class Box<T extends Fruit>{
  void add(T t){
//    ...
  }
}

//after 
class Box{
  void add(Fruit t){
//    ...
  }
}
//<T> -> Object
```
###2. 타입이 일치하지 않으면, 형변환
```java
// before
T get(int i){
  // Object 반환
  return list.get(i);
}

//after 
Fruit get(int i){
  return (Fruit)list.get(i);
}
//<T> -> Object
```
###3. 와일드 카드
```java
// before
static Juice makeJuice(FruitBox<? extends Fruit> box){
  String temp = "";
  for(Fruit f: box.getList()) temp += f + " ";
  return new Juice(temp);
}

// after
static Juice makeJuice(FruitBox box){
  String temp = "";
  Iterator it = box.getList().iterator();
  while(it.hasNext()) temp += (FruitBox)it.next() + " ";
  return new Juice(temp);
}
```

#2. 열거형(enums)
##2.1 열거형이란?
```java
class Card {
  enum Kind {CLOVER, HEART, DIAMOND, SPADE}
  enum Value {TWO, THREE, FOUR}
  
  final Kind kind;    // 타입이 int가 아니라 Kind이다.
  final Value value;
}
```
자바의 열거형은 타입까지 비교하기에 '타입에 안전한 열거형'이다.

``if(Card.CLOVER == Card.TWO)``는 true지만 false여야 의미상 맞음.

``if(Card.Kind.CLOVER == Card.Value.TWO)`` 에러 발생

그리고 중요한 것은 상수의 값이 바뀌면, 해당 상수를 참조하는 모든 소스를 다시 컴파일 하지만, 열거형은 그러지 않아도 된다.

##2.2 열거형의 정의와 사용
``enum 이름 { 상수1, 상수2 }``
###비교는 ==와 compareTo()로
```java
if(dir == Direction.EAST) x++;
else if(dir > Direction.WEST){...}  // 에러
else if(dir.compareTo(Direction.WEST)){...}   // OK. compareTo는 사실상 마이너스

void move(){
  switch(dir){
    case EAST:    // not Direction.EAST
      break;
    case WEST:
      break;
  }
}
```
###모든 열거형의 조상 - java.lang.Enum
메서드
- Class<E> getDeclaringClass() : 열거형의 Class 객체 반환.
- String name(): 열거형 상수의 이름 반환
- int ordinal(): 열거형 상수가 정의된 순서(0부터)
- T valueOf(Class<T> enumType, String name) : 지정된 열거형에서 name과 일치하는 열거형 상수 반환.

컴파일러가 추가해주는 메소드
- static E values()
- static E valueOf(String name)
##2.3 멤버 추가하기
```java
enum Direction{
  EAST(1), SOUTH(5), WEST(-1), NORTH(10);
  
  private final int value;
  Direction(int value){ this.value = value; }
  public int getValue(){ return value; }
}
```
- 반드시 final이어야 하지 않지만, 열거형 상수값 저장을 위해 설정.
- ``Direction d = new Direction(1)``과 같이 생성 불가.(생성자가 private라서)
- 다음과 같이 여러 값을 지정할 수도 있지만, 그에 맞게 인스턴스 변수와 생성자 등을 새로 추가해야한다.
```java
enum Direction{
  EAST(1, ">"), SOUTH(5, "V"), WEST(-1, "<"), NORTH(10, "^");
  
  private final int value;
  private final String symbol;
  Direction(int value, String symbol){ 
    this.value = value;
    this.symbol = symbol;
  }
  public int getValue(){ return value; }
  public String getSymbol(){ return symbol; }
}
```
###추상 메서드 추가하기
```java
// before
enum Transporatation{
  BUS(100), TRAIN(150), SHIP(100), AIRPLANE(1000);
  
  private final int BASIC_FARE;
  private Transporatation(int basicFare){
    BASIC_FARE = basicFare;
  }
  int fare(){
    return BASIC_FARE;
  }
}

// after
enum Transporatation {
  BUS(100) {
    int fare(int distance) {
      return distance * BASIC_FARE;
    }
  }, TRAIN(150) {
    int fare(int distance) {
      return distance * BASIC_FARE;
    }
  }, SHIP(100) {
    int fare(int distance) {
      return distance * BASIC_FARE;
    }
  }, AIRPLANE(1000) {
    int fare(int distance) {
      return distance * BASIC_FARE;
    }
  };

  protected final int BASIC_FARE;

  Transporatation(int basicFare) {
    BASIC_FARE = basicFare;
  }

  public int getBasicFare(){return BASIC_FARE;}

  abstract int fare(int distance);
}
```
*추상 메서드를 추가할 일은 잘 없다*
##2.4 열거형의 이해
```java
// enum Direction 내부 구조
class CDirection {
  static final CDirection EAST = new CDirection("EAST");
  static final CDirection WEST = new CDirection("WEST");
  static final CDirection SOUTH = new CDirection("SOUTH");
  static final CDirection NOTRH = new CDirection("NOTRH");

  private String name;
  private CDirection(String name){
    this.name = name;
  }
}
```
static 상수들은 객체의 주소이고 바뀌지 않으므로, ==으로 비교가 가능하다.
```java
abstract class MyEnum<T extends MyEnum<T>> implements Comparable<T> {
  static int id = 0;    // 객체에 붙일 번호

  int ordinal;
  String name = "";

  public int ordinal() {
    return ordinal;
  }

  MyEnum(String name) {
    this.name = name;
    ordinal = id++;     // 생성마다 1 증가
  }

  public int compareTo(T t) {
    return ordinal - t.ordinal();
  }
}
```
```java
abstract class Direction extends MyEnum{
  static final Direction EAST = new Direction("EAST"){
    Point move(Point p){}
  };
  static final Direction WEST = new Direction("WEST"){};
  static final Direction SOUTH = new Direction("SOUTH"){};
  static final Direction NOTRH = new Direction("NOTRH"){};

  private String name;
  private Direction(String name){
    this.name = name;
  }
  abstract Point move(Point p);
}
```